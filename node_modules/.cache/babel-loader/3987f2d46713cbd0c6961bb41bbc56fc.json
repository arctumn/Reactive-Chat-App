{"ast":null,"code":"var _jsxFileName = \"/home/arctumn/chat/src/Message.tsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst message_format = message => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: message.from_user.nickname\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: message.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }, this);\n};\n\nconst private_message = (message, this_user) => {\n  return message.to_user === this_user ? message_format(message) : null;\n};\n\n//Produces a message list showing messages received to this user\nexport const MessageBoard = content => {\n  const ready_messages = content.message_list.map(message => message.private_message ? // checks if the message is private, and will only show it if the user is the right person\n  private_message(message, content.this_user) : message_format(message) // In case its not private it will generate the message\n  ).filter(message => message !== null);\n  return (\n    /*#__PURE__*/\n    //Creates an unordered list with all the messages rightly treated\n    _jsxDEV(\"div\", {\n      children: ready_messages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this)\n  );\n};\n_c = MessageBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"MessageBoard\");","map":{"version":3,"sources":["/home/arctumn/chat/src/Message.tsx"],"names":["message_format","message","from_user","nickname","private_message","this_user","to_user","MessageBoard","content","ready_messages","message_list","map","filter"],"mappings":";;;AAaA,MAAMA,cAAc,GAAIC,OAAD,IAAqB;AACxC,sBACI;AAAA,4BACQ;AAAA,gBAAIA,OAAO,CAACC,SAAR,CAAkBC;AAAtB;AAAA;AAAA;AAAA;AAAA,YADR,eAEQ;AAAA,gBAAKF,OAAO,CAACA;AAAb;AAAA;AAAA;AAAA;AAAA,YAFR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CAPD;;AAQA,MAAMG,eAAe,GAAG,CAACH,OAAD,EAAkBI,SAAlB,KAAqC;AACzD,SAAOJ,OAAO,CAACK,OAAR,KAAoBD,SAApB,GAAgCL,cAAc,CAACC,OAAD,CAA9C,GAA0D,IAAjE;AACH,CAFD;;AAOA;AACA,OAAO,MAAMM,YAAuB,GAAGC,OAAO,IAAI;AAC9C,QAAMC,cAAc,GAAGD,OAAO,CAACE,YAAR,CACtBC,GADsB,CAEnBV,OAAO,IAAIA,OAAO,CAACG,eAAR,GAA0B;AACpCA,EAAAA,eAAe,CAACH,OAAD,EAASO,OAAO,CAACH,SAAjB,CADL,GACmCL,cAAc,CAACC,OAAD,CAHzC,CAGmD;AAHnD,IAKtBW,MALsB,CAKfX,OAAO,IAAIA,OAAO,KAAK,IALR,CAAvB;AAOA;AAAA;AAAS;AACL;AAAA,gBACSQ;AADT;AAAA;AAAA;AAAA;AAAA;AADJ;AAKH,CAbM;KAAMF,Y","sourcesContent":["import { FC } from \"react\"\n\nexport interface User {\n    nickname: string\n}\n\nexport interface Message {\n    from_user: User,\n    private_message: boolean,\n    to_user?: User,\n    message: string\n}\n\nconst message_format = (message:Message) => {\n    return (\n        <div>\n                <p>{message.from_user.nickname}</p>\n                <h5>{message.message}</h5>\n        </div>\n    )\n}\nconst private_message = (message:Message, this_user:User) => {\n    return message.to_user === this_user ? message_format(message) : null\n}\ninterface UIProp {\n    message_list :Message[],\n    this_user:User \n}\n//Produces a message list showing messages received to this user\nexport const MessageBoard:FC<UIProp> = content => {\n    const ready_messages = content.message_list\n    .map(\n        message => message.private_message ? // checks if the message is private, and will only show it if the user is the right person\n         private_message(message,content.this_user) : message_format(message) // In case its not private it will generate the message\n        )\n    .filter(message => message !== null)\n\n    return ( //Creates an unordered list with all the messages rightly treated\n        <div>\n                {ready_messages}\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}